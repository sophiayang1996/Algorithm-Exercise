1. 给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        letter = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}

        if not digits: return []
        self.res = []

        def helper(digits, idx, res):
            if len(digits) == idx:
                self.res.append(res)
                return 
            for i in letter[digits[idx]]:
                helper(digits, idx+1, res+[i])
            return
        
        helper(digits, 0, [])
        return [''.join(x) for x in self.res] **** you can also use list(map(''.join, self.res)) or list(map(lambda x: ''.join(x), self.res))
        
        
  2. 
  给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。

回文串 是正着读和反着读都一样的字符串。

class Solution:
    def partition(self, s: str) -> List[List[str]]:

        self.res = []

        def helper(str, res):
            if not str:
                self.res.append(res)
                return
            
            for i in range(len(str)):
                if str[:i+1] == str[i::-1]:
                    helper(str[i+1:], res+[str[:i+1]])

            return
        
        helper(s, [])

        return self.res

3. 全排列（无重复数字）

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        self.res = []

        def helper(nums, res):
            if not nums: 
                self.res.append(res)
                return
            
            for i in range(len(nums)):
                helper(nums[:i]+nums[i+1:], res+[nums[i]])
            
            return
        
        helper(nums, [])

        return self.res
        
        
 4, 全排列（有重复数字）
 
 class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        self.res = []

        def helper(nums, res):
            if not nums and res not in self.res:
                self.res.append(res)
                return

            for i in range(len(nums)):
                helper(nums[:i]+nums[i+1:], res+[nums[i]])
            
            return
        
        helper(nums, [])
        
        return self.res
        
        
5. 组合 （n, k)
   
   class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        self.res = []
        if n < k: return

        def helper(nums, idx, res):
            if idx == k: 
                self.res.append(res)
                return
            
            for i in range(len(nums)):
                helper(nums[i+1:], idx+1, res+[nums[i]])
            
            return

        nums = range(1, n+1)
        helper(nums, 0, [])

        return self.res
     
  6. 组合总和（可重复）
  
  给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        self.res = []

        def helper(nums, target, res):
            res.sort()
            if target < 0: return
            if target == 0 and res not in self.res:
                self.res.append(res)
                return
            
            for i in range(len(nums)):
                helper(nums[i:], target-nums[i], res+[nums[i]])
            
            return
        helper(candidates, target, [])

        return self.res
7.
给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

说明：

所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 


class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        self.res = []

        def helper(nums: List, target, res):
            res.sort()
            if target < 0: return
            if target == 0 and res not in self.res:
                self.res.append(res)
                return

            for i in range(len(nums)):
                if i > 0 and nums[i] == nums[i-1]: continue
                helper(nums[i+1:], target-nums[i], res+[nums[i]])
            
            return

        helper(candidates, target, [])

        return self.res
        
        
8.
找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。

说明：

所有数字都是正整数。
解集不能包含重复的组合。


class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        self. res = []

        def helper(nums, target, idx, res):
            if target < 0: return
            if target == 0 and idx == k:
                self.res.append(res)
                return
            if idx >= k: return

            for i in range(len(nums)):
                helper(nums[i+1:], target-nums[i], idx+1, res+[nums[i]])
            
            return
        
        nums = range(1,10)

        helper(nums, n, 0, [])

        return self.res
        
        
        
        
 9.
 给你一个整数数组 nums ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。返回的解集中，子集可以按 任意顺序 排列。


 class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        self.res = []

        def helper(nums, res):
            self.res.append(res)
            if not nums: return

            for i in range(len(nums)):
                if i > 0 and nums[i] == nums[i-1]: continue
                helper(nums[i+1:], res+[nums[i]])

            return
        nums.sort()
        helper(nums, [])

        return self.res
        
        
 10.
 给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

。
 class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        dirs = [[1,0],[-1,0],[0,1],[0,-1]]
        m, n = len(board), len(board[0])
        init = [[False for i in range(n)] for j in range(m)]

        def helper(i, j, idx):
            if idx == len(word):
                return True
            if onboard(i,j) and not init[i][j] and board[i][j] == word[idx]:
                init[i][j] = True
                for dir in dirs:
                    nexti = i + dir[0]
                    nextj = j + dir[1]
                    if helper(nexti, nextj, idx+1):
                        return True
                init[i][j] = False
            return False
            
  11.
  
  给你一个 m x n 的矩阵 board ，由若干字符 'X' 和 'O' ，找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。
  
  class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if not board: return
        m, n = len(board), len(board[0])
        dirs = [(0,1),(0,-1),(1,0),(-1,0)]
        visited = [[False for i in range(n)] for j in range(m)]

        def inboard(i,j):
            return i < m and j < n and i >= 0 and j >= 0
        
        def helper(i, j):
            if inboard(i, j) and not visited[i][j] and board[i][j] == 'O':
                visited[i][j] = True

                for dir in dirs:
                    nexti = i + dir[0]
                    nextj = j + dir[1]
                    helper(nexti, nextj)
            
            return

        for i in range(m):
            if board[i][0] == 'O':
                helper(i, 0)
            if board[i][n-1] == 'O':
                helper(i, n-1)
        for j in range(n):
            if board[0][j] == 'O':
                helper(0, j)
            if board[m-1][j] == 'O':
                helper(m-1, j)

        for i in range(m):
            for j in range(n):
                if not visited[i][j]:
                    board[i][j] = 'X'

        return board

        
12.
给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。

规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。

请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。


helper1(0, i, board[0][i])
            helper1(m-1, i, board[m-1][i])
            helper2(0, i, board[0][i])
            helper2(m-1, i, board[m-1][i])
                    
        def onboard(i, j):
            return i < m and j < n and i >= 0 and j >= 0

        for i in range(m):
            for j in range(n):
                if helper(i, j, 0): 
                    return True
        
        return False
  
  
  
  13.
  
  
n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。

每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。

class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        col = []
        diag1 = []
        diag2 = []
        self.res = []

        def helper(rowidx, res):
            if rowidx == n:
                self.res.append(generateboard(res))
            
            for i in range(n):
                if i not in col and rowidx-i not in diag1 and rowidx+i not in diag2:
                    col.append(i)
                    diag1.append(rowidx-i)
                    diag2.append(rowidx+i)
                    helper(rowidx+1, res+[i])
                    col.pop()
                    diag1.pop()
                    diag2.pop()

            
            return
        
        def generateboard(res):
            board = [['.' for i in range(n)] for j in range(n)]
            for i in range(n):
                board[i][res[i]] = 'Q'
            
            return [''.join(x) for x in board]
        
        helper(0, [])
        
        return self.res




14.
    n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。

给你一个整数 n ，返回 n 皇后问题 不同的解决方案的数量。


class Solution:
    def totalNQueens(self, n: int) -> int:
        if not n: return
        col = []
        diag1 = []
        diag2 = []
        self.cnt = 0
        
        
        def helper(rowidx, res):
            if rowidx == n:
                self.cnt += 1
            
            for i in range(n):
                if i not in col and rowidx-i not in diag1 and rowidx+i not in diag2:
                    col.append(i)
                    diag1.append(rowidx-i)
                    diag2.append(rowidx+i)
                    helper(rowidx+1, res+[i])
                    col.pop()
                    diag1.pop()
                    diag2.pop()
            
            return 

        helper(0, [])

        return self.cnt
 
 
 15.
 
 编写一个程序，通过填充空格来解决数独问题。

数独的解法需 遵循如下规则：

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
数独部分空格内已填入了数字，空白格用 '.' 表示。

 
 class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if not board: return
        rn = len(board)
        row = [[] for i in range(rn)]
        col = [[] for i in range(rn)]
        self.flag = False
        buckets = [[[] for i in range(rn//3)] for j in range(rn//3)]

        for i in range(rn):
            for j in range(rn):
                if board[i][j] != '.':
                    buckets[i//3][j//3].append(board[i][j])
                    row[i].append(board[i][j])
                    col[j].append(board[i][j])
        
        def helper(i, j):
            if i == len(board):
                self.flag = True
                return 

            if board[i][j] == '.':
                for n in range(1,10):
                    n = str(n)
                    if n not in row[i] and n not in col[j] and n not in buckets[i//3][j//3]:
                        row[i].append(n)
                        col[j].append(n)
                        buckets[i//3][j//3].append(n)
                        board[i][j] = n
                        if j == len(board) - 1:
                            helper(i+1, 0)
                        else:
                            helper(i, j+1)
                        if not self.flag:
                            row[i].pop()
                            col[j].pop()
                            buckets[i//3][j//3].pop()
                            board[i][j] = '.'
                return 
            else:
                if j == len(board) - 1:
                    helper(i+1, 0)
                else:
                    helper(i, j+1)
                         

            return

        helper(0, 0)







