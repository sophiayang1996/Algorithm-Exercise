为什么用hashmap？ hashmap比list查找速度快很多，list必须必须遍历，不适合大数据

hashmap用于查找：value：idx v in  hashmap; if hashmap.get(v)； record作用
hashmap用于统计：value：cnt  fromkeys 然后再+=1
hashmap作为映射、分组

1）two sum：
  题目特点：只有一对满足特定和，所以可以直接覆盖之前的hashmap（不需要顾及重复值），使用hash[value] = idx的方法，快速查找idx	
  基本算法：定义hashmap为dict、循环，如果value在keys上则返回，如果不在则添加
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashmap = dict()
        for i in range(len(nums)):
            t = target - nums[i]

            if t in hashmap:
                return [i,hashmap[t]]
            hashmap[nums[i]] = i

2) duplicate

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        hashmap = dict()
        for i in range(len(nums)):
            if nums[i] in hashmap:
                return True
            else:
                hashmap[nums[i]] = i        
        return False

3) search and count 最长和谐序列

题目要点；根据特定差值，查找存在；重复值需要计算；更倾向于count，表较max

class Solution:
    def findLHS(self, nums: List[int]) -> int:
        hashmap = dict.fromkeys(nums,0)

        for i in range(len(nums)):
            hashmap[nums[i]] += 1

        maxlen = 0
        for k,v in hashmap.items():
            if hashmap.get(k+1):
                maxlen = max(maxlen,hashmap.get(k+1)+v)
        
        return maxlen
        
        
4) 最长连续序列

题目要点：不在乎重复值，不在乎idx，单个信息所以使用set而不是dict；max的简单迭代；初始判断减少时间

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        hashmap = set(nums)
        maxlen = 0
        for i in range(len(nums)):
            if nums[i]-1 not in hashmap:
                leng = 1
                cur = nums[i]
                while cur+1 in hashmap:
                    cur += 1
                    leng += 1
                maxlen = max(maxlen,leng)
        return maxlen
     
     
 5) 两个数据交集（不重复）
 
 题目要点：简单查找，但是注意hashmap占用空间很大，所以两个set不如保留一个list
 
  class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        hashmap = set(nums2)

        li = []

        for i in range(len(nums1)):
            if nums1[i] in hashmap:
                if nums1[i] not in li:
                    li.append(nums1[i]) 
        
        return li
        
        
  6) 两数组交集（重复）
  
  题目要点：count；比较两个list的count比较，只需要一个hashmap统计，另外一个遍历，count -= 1直到为0
  
  class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        hashmap = dict.fromkeys(nums2,0)
        li = []

        for i in range(len(nums2)):
            hashmap[nums2[i]] += 1
        
        for i in range(len(nums1)):
            if hashmap.get(nums1[i]) and hashmap[nums1[i]]> 0:
                li.append(nums1[i])
                hashmap[nums1[i]] -= 1

        return li
        
        
7）字母异位（count）

题目要点：两个dict的比较，是没有顺序的，所有元素都相同就是相等，不像list，（set也没有顺序，tuple有顺序）
     
     class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        hashmap1 = dict.fromkeys(s,0)
        hashmap2 = dict.fromkeys(t,0)

        for i in s:
            hashmap1[i] += 1
        
        for i in t:
            hashmap2[i] += 1

        return(hashmap1 == hashmap2)
        
        
   8） 快乐数
   各个位平方和=1
   
   题目要点：基本数学原理：不能和为1的最后一定落入循环; hashmap作用用于记录track_hist； while True循环来表示直到终结。
   
   class Solution:
    def isHappy(self, n: int) -> bool:
        hashmap = set()
        if n == 1: return True
        
        while True:
            if n == 1 : return True
            elif n in hashmap: return False

            hashmap.add(n)
            n = sum([int(j)**2 for j in str(n)])
            
            
9) 同构字符串
一一映射

题目要点：一一映射： dict储存映射关系，判断是否相等，并添加新的，还要判断长度，避免多对一；len可以用于set list str，list和ste有idx，dict不可以直接len，要list（.keys)or value or items

class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        if len(s) != len(t): return False

        hashmap = dict()

        for i in range(len(s)):
            if hashmap.get(s[i]):
                if t[i] != hashmap[s[i]]:
                    return False
            hashmap[s[i]] = t[i]
        
        hashmapset = set(list(hashmap.values()))

        return len(hashmapset) == len(list(hashmap.keys()))
        
10) 频次排序

题目要点：dict根据value排序items 函数sorted(dict.items(),key = lambda i:(i[1],i[0]),reverse = True) 返回是一个list
注意 dict.items() dict.keys() dict.values()返回的是一个视图，不能len也不能idx，但是items有两个idx，items[0]表示key items[1]表示value
重要函数sorted（iterable，排序对象使用lambda，reverse是否desc）

class Solution:
    def frequencySort(self, s: str) -> str:
        hashmap = dict.fromkeys(s,0)
        li = []

        for i in range(len(s)):
            hashmap[s[i]] += 1

        hashmap = sorted(hashmap.items(), key = lambda i: (i[1],i[0]), reverse = True)

        for k,v in hashmap:
            li.extend([k]*v)

        return ''.join(li)



11) 三数之和

题目要点：hashmap只解决最后一次查找，而且是往回查询，其余的循环都是向前，所以当后一个与前一个相同时，可以直接continue跳过； x.sort()正确用法；hashmap只能在最后一次循环前定义；hashmap最后无论如何都要加上遍历的值；

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()

        if not nums or len(nums) < 4: return []
        
        li = []

        for i in range(len(nums)-3):
            if i>0 and nums[i]==nums[i-1]: continue

            for j in range(i+1,len(nums)-2):
                if j > i+1 and nums[j]==nums[j-1]: continue

                hashmap = set()

                for k in range(j+1,len(nums)):
                    t = target - nums[i] - nums[j] - nums[k]
                    if t in hashmap:
                        res = [nums[i],nums[j],nums[k],t]
                        res.sort()
                        
                        if res not in li:
                            li.append(res)
                    
                    hashmap.add(nums[k])

        return li
                
12) 三数之和，（不同列,4个向量输入，每个找一个，组成和）

题目要点： 不同列，所以不能使用hashmap添加方法；最大的逻辑就是减少时间复杂度，对半相加，两两比较和就行；本题最大特色是同个元素有不同的idx，返回结果是根据idx的，所以重复的组合属于不同结果

class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:

        if not nums1 or not nums2 or not nums3 or not nums4: return []

        hashmap1 = dict()
        hashmap2 = dict()

        cnt = 0

        for a in nums1:
            for b in nums2:
                hashmap1[a+b] = hashmap1.get(a+b,0) + 1

        for c in nums3:
            for d in nums4:
                hashmap2[c+d] = hashmap2.get(c+d,0) + 1

        for k,v in hashmap1.items():
            cnt += hashmap2.get(-k,0) * v

        return cnt

  
  
  13）字母异位词 ****
  给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。
  
  题目要点：异位类的问题，都可以通过排序；题目很好，使用dict的hashmap，对应排序类型和list；collections.defaultdict(list)规定value的类型；sort string的时候，要先sorted()然后"".join(str)再次拼成str
  collectons.defaultdict(int) 会给每个key默认v为0相当于get,但是get需要一个key，defaultdict定义了格式。
  根本逻辑是特征分组，又可以根据特征，cnt，也有载入原来的数值的，这时候就要append，defaultdict了
  
  
 
  class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        mp = collections.defaultdict(list)

        for st in strs:
            key = "".join(sorted(st))
            mp[key].append(st)
        
        return list(mp.values())


14)回旋阵
给定平面上 n 对 互不相同 的点 points ，其中 points[i] = [xi, yi] 。回旋镖 是由点 (i, j, k) 表示的元组 ，其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。

返回平面上所有回旋镖的数量。

题目要点：分组，记录平方和；没有重复值忧虑；

class Solution:
    def numberOfBoomerangs(self, points: List[List[int]]) :
        if not points or len(points) < 3: return 0
        res = 0

        for i in range(len(points)):
            hashmap = collections.defaultdict(int)

            for j in range(len(points)):
                sumv = (points[i][1]-points[j][1])**2+(points[i][0]-points[j][0])**2
                hashmap[sumv] += 1
            
            for v in hashmap.values():
                if v >= 2: 
                    res += v*(v-1)


        return res

15) 重复元素
给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的 绝对值 至多为 k。

题目要点：判断两数相等的查询，使用hashmap减少一层循环，边循环边记录；set的删除项 set.remove(item)；另外删除dict用.pop(key)

class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        hashmap = set()

        if not nums: return False

        for i in range(len(nums)):
            if nums[i] in hashmap:
                return True
            hashmap.add(nums[i])

            if len(hashmap) > k:
                hashmap.remove(nums[i-k])

        return False
        
        
16) 重复元素2 *****
给你一个整数数组 nums 和两个整数 k 和 t 。请你判断是否存在 两个不同下标 i 和 j，使得 abs(nums[i] - nums[j]) <= t ，同时又满足 abs(i - j) <= k 。     

如果存在则返回 true，不存在返回 false。

题目要点：滑动窗口，桶思想

class Solution:
    def containsNearbyAlmostDuplicate(self, nums: List[int], k: int, t: int) -> bool:

        if not nums or k<0 or t<0 : return False

        hashmap = dict()
        d = t+1

        for i in range(len(nums)):
            bucket = nums[i]//(t+1)

            if bucket in hashmap: return True
            if bucket -1 in hashmap:
                if abs(hashmap[bucket-1] - nums[i]) <= t:
                    return True
            if bucket+1 in hashmap:
                if abs(hashmap[bucket+1]-nums[i]) <= t:
                    return True
            hashmap[bucket] = nums[i]

            if i>=k:
                hashmap.pop(nums[i-k]//(t+1))

        return False






