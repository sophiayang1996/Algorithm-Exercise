1.two add -- linked list
给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。

请你将两个数相加，并以相同形式返回一个表示和的链表。

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

1.1 traversal/iteration
  class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        h1, h2 = l1, l2
        tmp = 0
        while h1 or h2: # 需要遍历最长的数
            val = h1.val + h2.val + tmp # 值=l1 + l2 +进位
            h1.val, tmp = val%10, val//10
            if not h1.next and h2.next: h1.next = ListNode(0) # 如果l1太短，添节点0
            if not h2.next and h1.next: h2.next = ListNode(0) # 如果l2太短，添节点0
            if not h1.next and not h2.next:  # 如果两个一样短，判断是否有进位，有就添节点
                if tmp: h1.next = ListNode(tmp)
                return l1 # 两个一样短的时候必然是返回的时候
            h1 = h1.next
            h2 = h2.next
1.2 recursion	
   class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        def add(a,b,extra): # 定义一个递归函数， 每次只需要传递两个链表值和进位
            dummy = ListNode(0)
            val = a.val + b.val + extra
            dummy.val, extra = val%10, val//10
            if not a.next and not b.next:  # 如果两个链表一样长，说明到头了，该返回了
                if extra: dummy.next = ListNode(extra) # 有进位添加进位
                return dummy
            else: 
                if a.next and not b.next: b.next = ListNode(0) # 如果两个链表不一样长，取长补短
                if b.next and not a.next: a.next = ListNode(0) # 如果两个链表不一样长，取长补短
                dummy.next = add(a.next, b.next, extra) # 继续递归，直到返回
            return dummy
        return add(l1, l2, 0) # 初始进位为0
 

         
    
