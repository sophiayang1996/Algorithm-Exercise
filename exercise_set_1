1.two add -- linked list
给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。

请你将两个数相加，并以相同形式返回一个表示和的链表。

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

1.1 traversal/iteration
  class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        h1, h2 = l1, l2
        tmp = 0
        while h1 or h2: # 需要遍历最长的数
            val = h1.val + h2.val + tmp # 值=l1 + l2 +进位
            h1.val, tmp = val%10, val//10
            if not h1.next and h2.next: h1.next = ListNode(0) # 如果l1太短，添节点0
            if not h2.next and h1.next: h2.next = ListNode(0) # 如果l2太短，添节点0
            if not h1.next and not h2.next:  # 如果两个一样短，判断是否有进位，有就添节点
                if tmp: h1.next = ListNode(tmp)
                return l1 # 两个一样短的时候必然是返回的时候
            h1 = h1.next
            h2 = h2.next
1.2 recursion	
   class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        def add(a,b,extra): # 定义一个递归函数， 每次只需要传递两个链表值和进位
            dummy = ListNode(0)
            val = a.val + b.val + extra
            dummy.val, extra = val%10, val//10
            if not a.next and not b.next:  # 如果两个链表一样长，说明到头了，该返回了
                if extra: dummy.next = ListNode(extra) # 有进位添加进位
                return dummy
            else: 
                if a.next and not b.next: b.next = ListNode(0) # 如果两个链表不一样长，取长补短
                if b.next and not a.next: a.next = ListNode(0) # 如果两个链表不一样长，取长补短
                dummy.next = add(a.next, b.next, extra) # 继续递归，直到返回
            return dummy
        return add(l1, l2, 0) # 初始进位为0
  
  
  2. effective ()
  
  给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。

class Solution:
    def isValid(self, s: str) -> bool:
        if not s: return True
        hashmap = {')':'(', '}':'{', ']':'['}

        stack = list()
        for i in s:
            if i in hashmap:
                if not stack or stack[-1] != hashmap[i]:
                    return False
                stack.pop()
            else:
                stack.append(i)

        return not stack

3. merge two linked list
将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        i, j = l1, l2
        res = ListNode(0)
        li = res

        while i and j:
            if i.val < j.val:
                li.next = i
                i = i.next
            else:
                li.next = j
                j = j.next
            li = li.next

        if not i:
            li.next = j
        else:
            li.next = i

        return res.next
        
   4. fast and slow
   
   给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。

不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if not nums: return

        fast, slow = 0, 0
        while fast < len(nums):
            if nums[fast] != nums[slow]:
                slow += 1
                nums[slow] = nums[fast]
            fast += 1
        
        return slow + 1
        
 5. KMP algorithm
 
 6. binary search
 left, right, mid
 return left

7. moving window:
left, right

for i in range(len(nums)):
  hashmap.remove(nums[i-1])
  while right < len(nums) and nums[right] not in hashmap:
    hashmap.add(nums[right])
    right += 1
 
 ans = max(cur_len, ans)
 
 
 
 8. 最长回文子串
 recursion
 
 class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s: return ''
        end, start = 0, 0

        def longestlist(s, left, right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            return left + 1, right - 1
        
        for i in range(len(s)):
            left1, right1 = longestlist(s, i, i)
            left2, right2 = longestlist(s, i, i+1)

            if right1 - left1 > end - start:
                start, end = left1, right1
            if right2 - left2 > end - start:
                start, end = left2, right2
            
        return s[start: end+1]
         
    
9. "Z" transformation:
将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。

比如输入字符串为 "PAYPALISHIRING" 行数为 3 时，排列如下：

P   A   H   N
A P L S I I G
Y   I   R
之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："PAHNAPLSIIGYIR"。

请你实现这个将字符串进行指定行数变换的函数：

class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows < 2: return s
        res = ["" for _ in range(numRows)]
        i, flag = 0, -1
        for c in s:
            res[i] += c
            if i == 0 or i == numRows - 1: flag = -flag
            i += flag
        return "".join(res)


